#option access_modifiers strict

import android.app.Activity;
import android.content.Context;
import android.graphics.Matrix;
import android.net.Uri;

import com.google.gson.annotations.SerializedName;
import com.google.protobuf.nano.MessageNano;

import com.snap.chat_reactions.ChatReactionsBelowMessageViewModel;
import com.snap.imageloading.view.SnapImageView;
import com.snapchat.client.messaging.Conversation;
import com.snapchat.client.messaging.FetchConversationWithMessagesCallback;
import com.snapchat.client.messaging.FetchMessageCallback;

import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Iterable;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.List;
import java.util.Map;
import java.util.Set;

[certain]
class MainActivity expects com.snap.mushroom.MainActivity {

    void $attachBaseContext(Context)
}

[certain]
class UUID expects com.snapchat.client.messaging.UUID {

   byte[] $getId()
}

[certain]
class ConversationManager expects com.snapchat.client.messaging.ConversationManager$CppProxy {

    void $sendMessageWithContent(...)
    void $updateMessage(...)
    void $displayedMessages(...)
    void $enterConversation(...)
    void $exitConversation(...)
    void $sendTypingNotification(...)
    void $fetchConversationWithMessages(...)
    void $fetchMessage(...)
}

[certain]
class SnapManager expects com.snapchat.client.messaging.SnapManager$CppProxy {

    void $onSnapInteraction(...)
}

[certain]
class Callback expects com.snapchat.client.messaging.Callback {

    void $onError(...)
    void $onSuccess()
}

[certain]
enum SavePolicy expects com.snapchat.client.messaging.SavePolicy {

    static this PROHIBITED;
    static this LIFETIME;
    static this VIEW_SESSION;
}

[certain]
enum ContentType expects com.snapchat.client.messaging.ContentType {

    static this $UNKNOWN;
    static this $SNAP;
    static this $CHAT;
    static this $LOCATION;
    static this $STATUS_SAVE_TO_CAMERA_ROLL;
    static this $STATUS_CONVERSATION_CAPTURE_SCREENSHOT;
    static this $STATUS_CONVERSATION_CAPTURE_RECORD;
}

[certain]
class MessageDestinations expects com.snapchat.client.messaging.MessageDestinations {

    ArrayList $getConversations()
}

[certain]
enum SnapInteractionType expects com.snapchat.client.messaging.SnapInteractionType {

    static this $VIEWING_INITIATED;
    static this $VIEWING_FINISHED;
    static this $REPLAY_GESTURE_PERFORMED;
    static this $MARK_AS_INVALID;
}

[certain]
enum MessageUpdate expects com.snapchat.client.messaging.MessageUpdate {

    static this $UNKNOWN;
    static this $READ;
    static this $RELEASE;
    static this $SAVE;
    static this $UNSAVE;
    static this $ERASE;
    static this $SCREENSHOT;
    static this $SCREEN_RECORD;
    static this $REPLAY;
}

[certain]
class LocalMessageContent expects com.snapchat.client.messaging.LocalMessageContent {

    !SavePolicy $getSavePolicy()
    !ContentType $getContentType()
}

[certain]
class PresenceSession expects com.snapchat.talkcorev3.PresenceSession$CppProxy {

    void $activate()
    void $deactivate()
    void $processTypingActivity(...)
}

[certain]
class NetworkApi expects com.snapchat.client.network_api.NetworkApi$CppProxy {

    void $submit(...)
    void $submitToNetworkManagerDirectly(...)
}

[certain]
class MessageContent expects com.snapchat.client.messaging.MessageContent {

    byte[] $getContent()
    !ContentType $getContentType()
}

[certain]
class Message expects com.snapchat.client.messaging.Message {

    !MessageContent $getMessageContent()
    !UUID $getSenderId()
}

[certain]
class Participant expects com.snapchat.client.messaging.Participant {

    int $getColor()
    !UUID $getParticipantId()
}

[certain]
class Conversation expects com.snapchat.client.messaging.Conversation {

    !UUID $getConversationId()
    String $getTitle()
    ArrayList $getParticipants()
}

[certain]
class MessageMetadata expects com.snapchat.client.messaging.MessageMetadata {

    boolean $getIsSaveable()
}

[certain]
enum MessageState {

    static void $<clinit>() {
        .string "NONE", bind field NONE next reference;
        .string "SENT", bind field SENT next reference;
        .string "DELIVERED", bind field DELIVERED next reference;
        .string "VIEWED", bind field VIEWED next reference;
        .string "SCREENSHOT", bind field SCREENSHOT next reference;
        .string "PENDING", bind field PENDING next reference;
    }
}

[certain]
enum SnapPlaybackStatus {

    static void $<clinit>() {
        .string "PLAYABLE", bind field PLAYABLE next reference;
        .string "VIEWEDREPLAYABLE", bind field VIEWEDREPLAYABLE next reference;
        .string "PLAYING", bind field PLAYING next reference;
        .string "VIEWEDNOTREPLAYABLE", bind field VIEWEDNOTREPLAYABLE next reference;
        .string "SAVED", bind field SAVED next reference;
        .string "NONE", bind field NONE next reference;
    }
}

[certain]
enum SaveType {

    static void $<clinit>() {
        .string "SNAPCHAT_ALBUM", bind field SNAPCHAT_ALBUM next reference;
        .string "SPECTACLES_ALBUM", bind field SPECTACLES_ALBUM next reference;
        .string "EXTERNAL_APPS", bind field EXTERNAL_APPS next reference;
        .string "SMS", bind field SMS next reference;
        .string "EMAIL", bind field EMAIL next reference;
    }
}


[certain]
enum ChatLayouts {

    int layoutId;

    static void $<clinit>() {
        .string "UNKNOWN", bind field SNAPCHAT_ALBUM next reference;
        .string "TEXT_WITH_MEDIA_CARDS", bind field TEXT_WITH_MEDIA_CARDS next reference;
        .string "SNAP", bind field SNAP next reference;
        .string "CHAT_MEDIA", bind field CHAT_MEDIA next reference;
        .string "MEMORIES_STORY", bind field MEMORIES_STORY next reference;
        .string "TEXT_STORY_REPLY", bind field TEXT_STORY_REPLY next reference;
        .string "AUDIO_NOTE", bind field AUDIO_NOTE next reference;
        .string "ERASE", bind field ERASE next reference;
        .string "SAVED_SNAP", bind field SAVED_SNAP next reference;
    }
}

[certain]
enum SnapMediaType {

    @SerializedName("text")
    static this TEXT;
    @SerializedName("media")
    static this MEDIA;
    @SerializedName("sticker")
    static this STICKER;
    @SerializedName("media_v3")
    static this MEDIA_V3;
    @SerializedName("media_v4")
    static this MEDIA_V4;

    String name;
}

[certain]
class MediaPackage {
    @SerializedName("session_id")
    java.lang.String sessionId;
    @SerializedName("content_id")
    java.lang.String contentId;
    @SerializedName("mediaId")
    java.lang.String mediaId;
}

[certain]
class MediaReference {

    [late] Uri uri;

    java.lang.String $toString() {
        [conserve]
        .string contains "MediaReference(";
        .string contains "type=", bind field mediaType next reference;
        [strict]
        .string contains "uri=", bind field uri next reference;
    }
}

[certain]
enum MediaType {

    static void $<clinit>() {
        .string "IMAGE", bind field IMAGE next reference;
        .string "VIDEO", bind field VIDEO next reference;
        .string "VIDEO_NO_SOUND", bind field VIDEO_NO_SOUND next reference;
        .string "AUDIO", bind field AUDIO next reference;
        .string "WEB", bind field WEB next reference;
    }
}

[late]
interface RxObserver {

    void accept(*)
    void error(Throwable)
    void disposable(*)
}

[certain]
class RxSupplier {

    static this supplyNothing()

    void subscribe(#RxObserver) {
        .string "observer is null";
        .string contains "RxJavaPlugins.setOnSingleSubscribe";
    }
}

[certain]
@*("chat_media/*/*")
class ChatMediaHandler {

    !RxSupplier resolve(Uri, Set, boolean, Set)
}

interface MessageDataModel {

    String getArroyoMessageId()
    String getSenderDisplayName()
    String getConversationId()
    String getSenderId()
    String $getType()
    String getSenderUsername()

    !MessageState getMessageState()
    !SnapPlaybackStatus getPlaybackStatus()
}

class ChatModelBase {

    Context context;
    * chatLayout;
    !MessageDataModel messageData;
    String senderId;
    [discard] Map map0;
    boolean boolField;
    [discard] boolean b0;
    #MediaDownloadStatus status;
    ChatReactionsBelowMessageViewModel reactionsViewModel;

    String $toString() {
        .string contains "ChatViewModelV1";
    }

    [discard] boolean bm0()
    [discard] boolean bm1()
    [discard] boolean bm2()

    boolean canSave()
    !SaveType getSaveType()
}

class ChatActionHelper {

    void $<init>(...) {
        .string "ChatActionHelper";
    }

    [discard] boolean bm0(!ChatModelBase)
    boolean canSave(!ChatModelBase)
}

[late]
class ParameterPackage {

    void $<init>(Boolean, Double, ...)

    java.lang.String $toString() {
        [conserve]
        .string contains "ParameterPackage(";
        .string contains "isInfiniteDuration", bind field isInfiniteDuration next reference;
        .string contains "timerOrDurationSeconds", bind field timeOrDurationSeconds next reference;
    }
}

[late]
interface MediaBaseBase {
    String getMediaType()
    String getMessageType()
}

[late, discard]
interface MediaBase implements #MediaBaseBase {

    !RxSupplier s0(...)
    List l0()
}

class LiveSnapMedia implements #MediaBase {
    [discard] static * sf0;

    @SerializedName("parameterPackage")
    #ParameterPackage parameterPackage;
    String mediaId;
    [discard] String s0;
    [discard] String s1;
    #MediaType mediaType;

    void $<init>()

    [discard] List m0() {
        .string "GetMedia isn\'t implemented on SnapParcelContent";
    }
}

[certain]
class MediaItem {

    String $toString() {
        [conserve]
        .string "MediaItem(id=";
        .string contains "id=", bind field id next reference;
        .string contains "type=", bind field mediaType next reference;
    }
}

class GallerySnapMedia {

    !MediaItem media;

    [discard] String s0() {
        .field !SnapMediaType->!MEDIA_V4;
    }

    [discard] List l0() {
        .method Collections->singletonList;
    }

    String getMediaType()
}

class ChatModelLiveSnap {

    [discard] boolean b0;

    void $<init>(Context, *, *, *, *, !MessageDataModel, !LiveSnapMedia, String, Map, boolean, ...)

    [discard] boolean bm0(*)
    [discard] boolean bm1()
}

class ChatModelSavedSnap {

    !MediaType mediaType;
    [discard] Uri u0;
    [discard] Uri u1;
    !LiveSnapMedia media;

    void $<init>(Context, !MessageDataModel, String, Map, boolean, ChatReactionsBelowMessageViewModel, boolean, int, int, !LiveSnapMedia, String, ...) {
        .field !ChatLayouts->!SAVED_SNAP;
        .method TimeUnit->toMillis;
        .method Double->isNaN;
        .method Context->getResources;
    }
}

class ChatModelAudioNote extends !ChatModelBase {

    [discard] java.lang.String s0;
    [discard] java.lang.String s1;
    [discard] boolean b0;

    void $<init>(Context, !ChatLayouts, !MessageDataModel, *, java.lang.String, java.util.Map, boolean, ...)

    Uri getUri()
}

[certain]
class CalendarDate {

    int month;
    int day;

    void $<init>(int, int)

    String $toString() {
        .string contains "CalendarDate";
        .string contains "day=";
    }
}

[certain]
class FriendProfilePageData {

    [late] #FriendLinkType friendLinkType;
    [late] !CalendarDate birthday;

    String $toString() {
        .string contains "FriendProfilePageData";
        .string contains "displayName", bind field displayName next reference;
        .string contains "friendLinkType", bind field friendLinkType next reference;
        .string contains "addedTimestamp", bind field addedTimestamp next reference;
        .string contains "reverseAddedTimestamp", bind field reverseAddedTimestamp next reference;
        .string contains "birthday", bind field birthday next reference;
        .string contains "addSourceTypeForNonFriend", bind field addSourceTypeForNonFriend next reference;
    }
}

[certain]
enum ProfileSectionType {

    static void $<clinit>() {
        .string "FOOTER_INFO_ITEM", bind field FOOTER_INFO_ITEM next reference;
        .string "IDENTITY_CAROUSEL";
    }
}

class FooterInfoItem {

    String text;

    void $<init>(String, long) {
        .field !ProfileSectionType->!FOOTER_INFO_ITEM;
    }
}

class FriendProfileTransformer {

    [discard] int i0;
    [discard] Object target;

    void $<init>(Object, int)

    * $apply(...) {
        .string "Required value was null.";
        .string "performanceLogger";
        .method Collections->singletonList;
        .field this->!target;
        .new !FooterInfoItem;
    }
}

class SaveToCameraRollActionHandler {

    void $<init>(Context, ...) {
        .string "SaveToCameraRollActionHandler";
    }

    void exportMedia(*, *, *) {
        .string "SaveToCameraRollActionHandler";
    }
}

[certain]
class BitmojiUriHandler {

    void $<init>(...) {
        .string "BitmojiUriHandler";
    }

    * handle(Uri, ...) {
        .string "BitmojiUriHandler";
    }
}

[certain]
enum FriendAddMethod {

    @com.google.gson.annotations.SerializedName("ADDED_BY_USERNAME")
    static * ADDED_BY_USERNAME;
    @com.google.gson.annotations.SerializedName("ADDED_BY_ADDED_ME_BACK")
    static * ADDED_BY_ADDED_ME_BACK;
    @com.google.gson.annotations.SerializedName("ADDED_BY_SUGGESTED")
    static * ADDED_BY_SUGGESTED;
    @com.google.gson.annotations.SerializedName("ADDED_BY_SHARED_USERNAME")
    static * ADDED_BY_SHARED_USERNAME;
    @com.google.gson.annotations.SerializedName("ADDED_BY_SHARED_STORY")
    static * ADDED_BY_SHARED_STORY;
    @com.google.gson.annotations.SerializedName("ADDED_BY_GROUP_CHAT")
    static * ADDED_BY_GROUP_CHAT;
}

[certain]
class FriendActionRequest {

    @com.google.gson.annotations.SerializedName("action")
    java.lang.String action;
    @com.google.gson.annotations.SerializedName("added_by")
    java.lang.String addedBy;
}

class FriendActionClient {

    void $<init>(...) {
        .string "FriendActionClient";
    }

    * sendFriendAction(!FriendActionRequest)
}

[certain]
class LocationMessage {

    [discard] java.lang.String s0;
    [discard] java.lang.String s1;
    double latitude;
    double longitude;

    [discard] java.lang.String sm0() {
        .string "share_location";
    }
}

class LocationMessageBuilder {

    * build(*, String, Conversation, Map) {
        .type !LocationMessage;
    }

    * transform(*, *, !MediaReference)
}

[certain]
class MemoriesPickerVideoDurationConfig {

    long maxDuration;
    TimeUnit timeUnit;
    int warningTextResource;

    String $toString() {
        .string contains "MemoriesPickerVideoDurationConfig";
        .string contains "durationUnits";
    }
}

[certain]
class OperaActionMenuOptionViewModel {

    java.lang.String $toString() {
        [conserve]
        .string contains "OperaActionMenuOptionViewModel";
        .string contains "iconResource", bind field iconResource next reference;
        .string contains "textResource", bind field textResource next reference;
        .string contains "textColorResource", bind field textColorResource next reference;
        .string contains "eventName", bind field eventName next reference;
        .string contains "isLoading", bind field isLoading next reference;
        .string contains "actionMenuId", bind field actionMenuId next reference;
    }
}

[certain]
enum OperaContextAction {

    static void $<clinit>() {
        .string "SEND", bind field SEND next reference;
        .string "EDIT", bind field EDIT next reference;
        .string "EXPORT", bind field EXPORT next reference;
        .string "IN_APP_REPORT", bind field IN_APP_REPORT next reference;
        .string "REPORT_AD", bind field REPORT_AD next reference;
        .string "HIDE_AD", bind field HIDE_AD next reference;
        .string "SAVE", bind field SAVE next reference;
    }
}

class OperaContextActions {

    [discard] static !OperaActionMenuOptionViewModel vm0;
    [discard] static !OperaActionMenuOptionViewModel vm1;
    [discard] static !OperaActionMenuOptionViewModel vm2;
    [discard] static !OperaActionMenuOptionViewModel vm3;
    [discard] static !OperaActionMenuOptionViewModel vm4;

    static void $<clinit>() {
        .field !OperaContextAction->!IN_APP_REPORT, bind field reportAction next reference;
        .field !OperaContextAction->!SAVE, bind field saveAction next reference;
    }
}


class StreamingMethod {

    String $toString() {
        .string contains "StreamingInfo";
        .string contains "requestHeaders";
    }
}

class OperaMediaInfo {

    String uri;
    #EncryptionAlgorithm encryption;
    !StreamingMethod streamingMethod;

    [discard] List l0;
    [discard] * a0;
    [discard] Matrix m0;

    String $toString() {
        .string "OperaMediaInfo";
        .string "hasEncryptionAlgorithm";
    }
}

[late]
interface EncryptionAlgorithm {

    InputStream encryptStream(InputStream)
    InputStream decryptStream(InputStream)
}

[certain, discard]
class FeatureMetadata {

    String $toString() {
        [conserve]
        .string contains "FeatureMetadata";
        .string contains "attribution=";
    }
}

[certain, discard]
class Metrics {

    String $toString() {
        .string "Metrics(loadSource=";
    }
}

interface MediaStreamProvider {

    [discard] !FeatureMetadata fm0()
    InputStream getMediaStream()
    void $dispose()
    [discard] boolean b0()
    [discard] !Metrics m0()
}

[certain]
class SendingPacketBuilder {

    void $<init>(...) {
        .string "SendingPacketBuilder";
    }
}

class SerializableContent extends #MediaContainer {

    !MediaBaseBase message;

    String $toString() {
        .string "SerializableContent(message=";
    }
}

class MessagePayload {

    [discard] String s0;
    !MediaContainer media;

    void $dispose()
}

class SendAndRecycleProcessor {

    void $<init>(...) {
        .string "SendAndRecycleProcessor";
    }
}

class MessageSenderCrossroad {

    [late] !MessagePayload payload;

    void $<init>(!MessagePayload, !SendAndRecycleProcessor) {
        [strict]
        .expr this->* = .p0, bind field payload current reference;
    }

    * $apply(*) {
    }
}

[certain]
class EmptyParamsMap extends #ParamsMap {

    [discard] void m0(...) {
        .string "Empty params is immutable";
        .type UnsupportedOperationException;
    }

    [discard] void m1(...) {
        .string "Empty params is immutable";
        .type UnsupportedOperationException;
    }
}

[late]
class ParamsMap {

    ConcurrentHashMap map;

    void put(#MapKey, Object) {
        .field this->!map;
        .method ConcurrentHashMap->put;
    }
}

[late]
class MapKey {
    String name;
    Object defaultValue;
    boolean hasDefaultValue;
}

[certain]
class StoryAutoAdvanceMode {

    [late] static this NO_AUTO_ADVANCE;
    [late] static this FIXED_DURATION;
    [late] static this VIDEO_COMPLETION;

    static void $<clinit>() {
        [strict]
        .string "NO_AUTO_ADVANCE", bind field NO_AUTO_ADVANCE next reference;
        [strict]
        .string "FIXED_DURATION", bind field FIXED_DURATION next reference;
        [strict]
        .string "VIDEO_COMPLETION", bind field VIDEO_COMPLETION next reference;
    }
}

[certain]
class StoryMediaPlaybackMode {

    [late] static this LOOPING;
    [late] static this ONCE;
    [late] static this LOOPING_WHEN_LESS_THAN_TEN_SECONDS;
    [late] static this PAUSED;

    static void $<clinit>() {
        [strict]
        .string "LOOPING", bind field LOOPING next reference;
        [strict]
        .string "ONCE", bind field ONCE next reference;
        [strict]
        .string "LOOPING_WHEN_LESS_THAN_TEN_SECONDS", bind field LOOPING_WHEN_LESS_THAN_TEN_SECONDS next reference;
        [strict]
        .string "PAUSED", bind field PAUSED next reference;
    }
}

class StoryMetadata extends !ParamsMap {

    [late] !MapKey overlayImageMediaInfo;
    [late] !MapKey videoMediaInfo;
    [late] !MapKey imageMediaInfo;
    [late] !MapKey actionMenuOptions;
    [late] !MapKey autoAdvanceMode;
    [late] !MapKey mediaPlaybackMode;

    static void $<clinit>() {
        [strict]
        .string "overlay_image_media_info", bind field overlayImageMediaInfo next reference;
        [strict]
        .string "video_media_info", bind field videoMediaInfo next reference;
        [strict]
        .string "image_media_info", bind field imageMediaInfo next reference;
        [strict]
        .string "auto_advance_mode", bind field autoAdvanceMode next reference;
        [strict]
        .string "media_playback_mode", bind field mediaPlaybackMode next reference;
        [strict]
        .string "action_menu_options", bind field actionMenuOptions next reference;
    }
}

class ContextStoryKeys {

    [late] !MapKey contextSession;
    [late, discard] !MapKey hideContext;

    static void $<clinit>() {
        [strict]
        .string "context_session", bind field contextSession next reference;
        [strict]
        .string "HIDE_CONTEXT", bind field hideContext next reference;
    }
}

class FriendStoryKeys {

    [late] !MapKey playableSnapStoryRecord;

    static void $<clinit>() {
        [strict]
        .string "PLAYABLE_STORY_SNAP_RECORD", bind field playableSnapStoryRecord next reference;
    }
}

class MessageStoryKeys {

    [late] !MapKey messageId;

    static void $<clinit>() {
        [strict]
        .string "MESSAGE_ID", bind field messageId next reference;
    }
}

[certain]
class PlayableStorySnap {

    [late] String displayName;

    String $toString() {
        .string contains "PlayableStorySnap";
        .string contains "displayName=", bind field displayName next reference;
    }
}

[certain, discard]
class ChatContextParams {

    String $toString() {
        .string contains "ChatContextParams";
        .string contains "conversationId=";
    }
}

[certain, discard]
class StoryRemixParams {

    String $toString() {
        .string contains "StoryRemixParams";
        .string contains "contentUri=";
    }
}

[certain, discard]
class SnapContextParams {

    String $toString() {
        .string contains "SnapContextParams";
        .string contains "storyMediaKey=";
    }
}

[certain]
class SnapUsername {

    String getDisplayString()

    String $toString() {
        .string "Username(originalUsername=";
        .string contains "mutableUsername=";
    }
}

[late]
class SnapContextInfo {

    [discard] !MediaType mediaType;
    !SnapUsername username;
}

class ContextSession {

    [discard] !ChatContextParams chatContextParams;
    [discard] !StoryRemixParams storyRemixParams;
    [discard] !SnapContextParams snapContextParams;
    #SnapContextInfo info;
}

class ContextActionMenuModel {

    [late] #ContextClickHandler onClick;
    !OperaContextAction action;

    String $toString() {
        .string contains "ContextActionMenuModel";
        [strict]
        .string contains "onClick=", bind field onClick next reference;
    }
}

[late]
interface ContextClickHandler {

    Object $invoke(Object)
}

[certain]
class OperaContextMenuProperty {

    [late] String friendUsername;

    String $toString() {
        .string contains "OperaContextMenuProperty";
        [strict]
        .string contains "friendUsername=", bind field friendUsername next reference;
    }
}

[certain]
enum PublicProfileTileType {

    static * FRIEND_PROFILE_SNAP_PRO_PUBLIC_PROFILE;

    void $<init>(...) {
        .string "FRIEND_PROFILE_SNAP_PRO_PUBLIC_PROFILE";
    }
}

[certain]
interface PublicProfileMetadata {

    [discard] String s0()
    String getProfilePicture72()
    String $getId()
    String $getTitle()
    [discard] String s1()
    [discard] String s2()
    String getProfilePicture90()
    String getUsername()
}

[late]
interface PublicProfileTileInfo {

    !PublicProfileMetadata getMetadata()
}

[certain]
class PublicProfileTile extends #PublicProfileTileBase {

    #PublicProfileTileInfo info;
    String profilePictureUrl;

    void $<init>(...) {
        .field !PublicProfileTileType->!FRIEND_PROFILE_SNAP_PRO_PUBLIC_PROFILE;
    }
}

[certain]
class PublicProfileTileTransformer {

    SnapImageView profileImageView;

    void transform(!PublicProfileTileBase, ...) {
        .string "SUBCATEGORY_V3_GOVERNMENT_ORG";
    }
}

[certain]
class ComposerFriend expects com.snap.composer.people.Friend {

    #ComposerUser $getUser()
}

[late]
class ComposerUser {

    String $getUsername()
}

[certain]
class FriendStoringProxy {

    boolean $perform(...) {
        .method *->getFriends;
        .method *->getBestFriends;
        .new #FriendListener;
    }
}

[late]
class FriendListener {

    * handle(Object, Object)
}

[certain]
class DisplayInfoContainer {

    [late] String term;

    String $toString() {
        [strict]
        .string "DisplayInfoContainer(term=", bind field term next reference;
    }
}

[certain]
class ProfileMyFriendsSection {

    [discard] * m0(...) {
        .string "ProfileMyFriendsSection";
    }

    List filter(List, String) {
        .type !DisplayInfoContainer;
    }
}

[certain]
class FriendsFeedRecordHolder {

    [late] #SnapIterable records;
    #EmojiMap emojis;

    String $toString() {
        .string contains "records=";
        [strict]
        .string contains "activeConversationState", bind field records previous reference;
    }
}

[certain]
class FriendsFeedView {

    [late] String key;
    [late] String friendmojiCategories;

    String $toString() {
        .string contains "FriendsFeedView";
        [strict]
        .string contains "key:", bind field key next reference;
        [strict]
        .string contains "friendmojiCategories:", bind field friendmojiCategories next reference;
    }
}

[late, exact]
class EmojiMap {

    Map map;

    void $<init>(Map)
}

[late]
interface SnapIterable implements Iterable {

    Object $get(int)
    int size()
}

[certain]
class BasicFeedInfo {

    [late] String key;

    String $toString() {
        .string contains "GetBasicFeedInfoForConversation";
        [strict]
        .string contains "key:", bind field key next reference;
    }
}

[late]
class FeedInfoHolder extends #FeedInfoHolderBase {

    !BasicFeedInfo info;
}

[certain, discard]
class FriendInfo {

    String $toString() {
        .string contains "FriendInfo";
        .string contains "friendUserId";
        .string contains "friendDisplayName";
    }
}

class FriendChatActionMenuBuilder {

    #FeedInfoHolder feedInfoHolder;
    [discard] !FriendInfo friendInfo;

    #RxBase build() {
        .method Collections->singletonList;
        .new ArrayList;
    }
}

[late]
class RxBase {

    static * singleton(Object) {
        .string "item is null";
        .method *->requireNonNull;
        .new #RxSingleton;
    }
}

[late]
class RxSingleton {

    Object value;
}

[certain]
class ActionMenuOptionTextViewModel {

    void $<init>(int, String, Integer, Integer, Integer, int)

    String $toString() {
        .string contains "ActionMenuOptionTextViewModel";
        .string contains "textParam";
    }
}

[certain]
class ActionMenuActionModel {

    String $toString() {
        .string "ActionMenuActionModel(eventData=";
    }
}

[certain]
enum ActionMenuOptionItemType {

    [late] static this OPTION_ITEM;
    [late] static this OPTION_ITEM_TOGGLE;
    [late] static this SIMPLE_OPTION_ITEM;
    [late] static this SPINNER_OPTION_ITEM;
    [late] static this SUBTITLE_OPTION_ITEM;
    [late] static this FEED_OPTION_ITEM;

    static void $<clinit>() {
        [strict]
        .string "OPTION_ITEM", bind field OPTION_ITEM next reference;
        [strict]
        .string "OPTION_ITEM_TOGGLE", bind field OPTION_ITEM_TOGGLE next reference;
        [strict]
        .string "SIMPLE_OPTION_ITEM", bind field SIMPLE_OPTION_ITEM next reference;
        [strict]
        .string "SPINNER_OPTION_ITEM", bind field SPINNER_OPTION_ITEM next reference;
        [strict]
        .string "SUBTITLE_OPTION_ITEM", bind field SUBTITLE_OPTION_ITEM next reference;
        [strict]
        .string "FEED_OPTION_ITEM", bind field FEED_OPTION_ITEM next reference;
    }
}

[certain]
class ActionMenuOptionItemViewModel {

    void $<init>(!ActionMenuOptionTextViewModel, !ActionMenuActionModel, ...)

    String $toString() {
        .string contains "ActionMenuOptionItemViewModel";
        .string contains "actionModel";
    }
}

[certain]
class ActionMenuOptionToggleItemViewModel {

    void $<init>(!ActionMenuOptionTextViewModel, !ActionMenuActionModel, boolean)

    String $toString() {
        .string contains "ActionMenuOptionToggleItemViewModel";
        .string contains "actionModel";
    }
}

[certain, discard]
enum ChatActionType {

    [late] static this CHAT_BUTTON_CLICK;
    [late] static this SNAP_BUTTON_CLICK;
    [late] static this AUDIO_CALL_BUTTON_CLICK;
    [late] static this VIDEO_CALL_BUTTON_CLICK;
    [late] static this SETTINGS_CLICK;

    static void $<clinit>() {
        [strict]
        .string "CHAT_BUTTON_CLICK", bind field CHAT_BUTTON_CLICK next reference;
        [strict]
        .string "SNAP_BUTTON_CLICK", bind field SNAP_BUTTON_CLICK next reference;
        [strict]
        .string "AUDIO_CALL_BUTTON_CLICK", bind field AUDIO_CALL_BUTTON_CLICK next reference;
        [strict]
        .string "VIDEO_CALL_BUTTON_CLICK", bind field VIDEO_CALL_BUTTON_CLICK next reference;
        [strict]
        .string "SETTINGS_CLICK", bind field SETTINGS_CLICK next reference;
    }
}

[certain]
class SendChatActionDataModel {

    String key;

    void $<init>(String, boolean, ...)

    String $toString() {
        .string contains "SendChatActionDataModel";
        .string contains "isGroup";
    }
}

[certain, exact]
class SendChatAction extends #ActionBase {

    !SendChatActionDataModel dataModel;

    void $<init>(!SendChatActionDataModel) {
        .field !ChatActionType->!CHAT_BUTTON_CLICK;
    }
}

[certain, exact]
class SettingsClickAction extends !ActionBase {

    void $<init>() {
        .field !ChatActionType->!SETTINGS_CLICK;
    }
}

class FriendChatActionHandler {

    [discard] !FeedInfoHolderBase info;

    void handle(!ActionBase) {
        .type !SettingsClickAction;
        .type !SendChatAction;
    }
}

[late]
enum ConfigValueType {

    [late] static this BOOLEAN;
    [late] static this INTEGER;
    [late] static this LONG;
    [late] static this FLOAT;
    [late] static this DOUBLE;
    [late] static this STRING;

    static void $<clinit>() {
        .string "BOOLEAN", bind field BOOLEAN next reference;
        .string "INTEGER", bind field INTEGER next reference;
        .string "LONG", bind field LONG next reference;
        .string "FLOAT", bind field FLOAT next reference;
        .string "DOUBLE", bind field DOUBLE next reference;
        .string "STRING", bind field STRING next reference;
    }
}

[late]
class ConfigValue {

    Object defaultValue;
    #ConfigValueType valueType;
}

[late]
interface ConfigKeyBase {

    #ConfigValue value()
    String getName()
}

enum AdConfigKey implements #ConfigKeyBase {

    [late] static this GLOBAL_MIN_TIME_BETWEEN_ADS;
    [late] static this GLOBAL_MIN_SNAPS_BETWEEN_ADS;

    static void $<clinit>() {
        .string "GLOBAL_MIN_TIME_BETWEEN_ADS", bind field GLOBAL_MIN_TIME_BETWEEN_ADS next reference;
        .string "GLOBAL_MIN_SNAPS_BETWEEN_ADS", bind field GLOBAL_MIN_SNAPS_BETWEEN_ADS next reference;
    }
}

class CompositeConfigurationProvider {

    void $<init>(...) {
        .string "CompositeConfigurationProvider";
    }

    Object get(!ConfigKeyBase, !ConfigValueType, ...) {
        .string contains "for config";
        .string contains "appStartExperimentReader";
    }
}

class UploadSnapReadReceiptDurableJobProcessor {

    !RxSupplier uploadReadReceipts(...) {
        .string "UploadSnapReadReceiptDurableJobProcessor";
        .string "storyType";
    }
}

class DiscoverViewBinder {

    void setSections(List) {
        .string "dfosc:setSections";
    }
}

class DiscoverFeedObservableSection {

    !DiscoverFeedSection model;

    boolean $equals(...) {
        .string contains "DiscoverFeedObservableSection";
    }
}

[certain]
class DiscoverFeedSectionLayout {

    int verticalSectionLayout;
    int horizontalSectionLayout;

    String $toString() {
        .string contains "DiscoverFeedSectionLayout";
        .string contains "horizontalSectionLayout";
    }
}

[certain]
class DiscoverFeedSection {

    String name;
    !DiscoverFeedSectionLayout layout;

    boolean $equals(...) {
        .string contains "DiscoverFeedSection";
    }
}

[certain]
class ChatContext {

    [discard] long feedId;
    String conversationId;

    String $toString() {
        .string "ChatContext(feedId=";
        .string contains "conversationId=";
    }
}

[certain]
class ArroyoMessageListDataProvider {

    void $<init>(...) {
        .string "ArroyoMessageListDataProvider";
    }

    * enterConversation(!ChatContext, ...) {
        .string "NativeSessionWrapper:enterConversation";
    }
}

[certain]
class ExportItem {

    String fileName;
    Uri uri;

    String $toString() {
        .string "ExportItem(actualFileName=";
        .string ", uri=";
    }
}

[certain]
class MediaExportControllerImpl {

    void $<init>(...) {
        .string "MediaExportControllerImpl";
    }

    Uri exportMedia(*, *, !ExportItem, ...) {
        .string "mime_type";
        .string "_display_name";
        .string "_size";
    }
}

[certain]
class MessageNanoBase extends MessageNano {

    [discard] * m0(...) {
        .string "Tried to getExtension with a differernt Extension.";
    }
}

[certain]
class NanoMessageContent extends !MessageNanoBase {

    static this parse(byte[])

    #NanoChatMessageContent getChatMessageContent() {
        .type !NanoChatMessageContent;
    }
}

[late, exact]
class NanoChatMessageContent extends !MessageNanoBase {

    [discard] * a0;
    int typeNum;
    String content;

    void $<init>(...)

    [discard] int $computeSerializedSize()
    [discard] MessageNano $mergeFrom(*)
    [discard] void $writeTo(*)
}

[certain]
class DefaultFetchConversationCallback extends FetchConversationWithMessagesCallback {

    #ConversationDummyInterface dummy;
    !UUID conversationId;
    [discard] boolean b0;

    void $<init>(...) {
        .string "NativeSessionWrapper:FetchConversationWithMessages";
    }

    void $onFetchConversationWithMessagesComplete(...)
}

[certain]
class DefaultFetchMessageCallback extends FetchMessageCallback {

    [discard] int i0;
    #MessageDummyInterface dummy;

    void $<init>(...)

    void $onFetchMessageComplete(...)
}

[certain, discard]
class FriendRepositoryAction {

    String $toString() {
        .string "Friend.sq:selectFriendsByUserIds";
    }
}

[certain]
class FriendsRepository {

    void $<init>(...) {
        .string "FriendRepository";
    }

    List selectFriendsByUserIds(List) {
        .new !FriendRepositoryAction;
    }
}

class SelectFriendsByUserIds {

    !SnapUsername username;
    [late] String userId;
    [late] String displayName;
    [late] Integer streakLength;
    [late] Long streakExpiration;

    String $toString() {
        .string contains "SelectFriendsByUserIds";
        [strict]
        .string contains " userId:", bind field userId next reference;
        .string contains " displayName:", bind field displayName next reference;
        .string contains " streakLength:", bind field streakLength next reference;
        .string contains " streakExpiration:", bind field streakExpiration next reference;
    }
}